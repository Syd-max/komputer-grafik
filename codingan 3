import matplotlib.pyplot as plt
import math

def brute_force(x1, y1, x2, y2):
    points = []
    dx = x2 - x1
    dy = y2 - y1
    if dx == 0:  # Vertikal
        for y in range(y1, y2+1):
            points.append((x1, y))
    elif dy == 0:  # Horizontal
        for x in range(x1, x2+1):
            points.append((x, y1))
    else:
        m = dy / dx
        N = dx + 1
        x = x1
        for i in range(N):
            y = m * (x - x1) + y1
            ya = round(y)
            points.append((x, ya))
            x += 1
    return points

def dda(x1, y1, x2, y2):
    points = []
    dx = x2 - x1
    dy = y2 - y1
    step = abs(dx) if abs(dx) > abs(dy) else abs(dy)
    x_inc = dx / step
    y_inc = dy / step
    x, y = x1, y1
    for i in range(int(step) + 1):
        points.append((round(x), round(y)))
        x += x_inc
        y += y_inc
    return points

def bresenham(x1, y1, x2, y2):
    points = []
    dx = x2 - x1
    dy = y2 - y1
    p = 2 * dy - dx
    x, y = x1, y1
    points.append((x, y))

    for _ in range(dx):
        x += 1
        if p < 0:
            p += 2 * dy
        else:
            y += 1
            p += 2 * dy - 2 * dx
        points.append((x, y))
    return points

def plot_lines():
    A = (3, 2)
    B = (11, 6)

    bf_points = brute_force(*A, *B)
    dda_points = dda(*A, *B)
    bres_points = bresenham(*A, *B)

    plt.figure(figsize=(10, 6))
    plt.grid(True)

    # Brute Force
    x_bf, y_bf = zip(*bf_points)
    plt.plot(x_bf, y_bf, 'ro-', label='Brute Force')

    # DDA
    x_dda, y_dda = zip(*dda_points)
    plt.plot(x_dda, y_dda, 'go-', label='DDA')

    # Bresenham
    x_bres, y_bres = zip(*bres_points)
    plt.plot(x_bres, y_bres, 'bo-', label='Bresenham')

    plt.legend()
    plt.title('Pembuatan Garis dengan 3 Algoritma')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.show()

plot_lines()